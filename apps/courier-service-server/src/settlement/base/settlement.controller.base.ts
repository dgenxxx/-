/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SettlementService } from "../settlement.service";
import { SettlementCreateInput } from "./SettlementCreateInput";
import { Settlement } from "./Settlement";
import { SettlementFindManyArgs } from "./SettlementFindManyArgs";
import { SettlementWhereUniqueInput } from "./SettlementWhereUniqueInput";
import { SettlementUpdateInput } from "./SettlementUpdateInput";
import { OfficeFindManyArgs } from "../../office/base/OfficeFindManyArgs";
import { Office } from "../../office/base/Office";
import { OfficeWhereUniqueInput } from "../../office/base/OfficeWhereUniqueInput";

export class SettlementControllerBase {
  constructor(protected readonly service: SettlementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Settlement })
  async createSettlement(
    @common.Body() data: SettlementCreateInput
  ): Promise<Settlement> {
    return await this.service.createSettlement({
      data: data,
      select: {
        createdAt: true,
        district: true,
        id: true,
        municipality: true,
        name: true,
        postalCode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Settlement] })
  @ApiNestedQuery(SettlementFindManyArgs)
  async settlements(@common.Req() request: Request): Promise<Settlement[]> {
    const args = plainToClass(SettlementFindManyArgs, request.query);
    return this.service.settlements({
      ...args,
      select: {
        createdAt: true,
        district: true,
        id: true,
        municipality: true,
        name: true,
        postalCode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Settlement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async settlement(
    @common.Param() params: SettlementWhereUniqueInput
  ): Promise<Settlement | null> {
    const result = await this.service.settlement({
      where: params,
      select: {
        createdAt: true,
        district: true,
        id: true,
        municipality: true,
        name: true,
        postalCode: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Settlement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSettlement(
    @common.Param() params: SettlementWhereUniqueInput,
    @common.Body() data: SettlementUpdateInput
  ): Promise<Settlement | null> {
    try {
      return await this.service.updateSettlement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          district: true,
          id: true,
          municipality: true,
          name: true,
          postalCode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Settlement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSettlement(
    @common.Param() params: SettlementWhereUniqueInput
  ): Promise<Settlement | null> {
    try {
      return await this.service.deleteSettlement({
        where: params,
        select: {
          createdAt: true,
          district: true,
          id: true,
          municipality: true,
          name: true,
          postalCode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/offices")
  @ApiNestedQuery(OfficeFindManyArgs)
  async findOffices(
    @common.Req() request: Request,
    @common.Param() params: SettlementWhereUniqueInput
  ): Promise<Office[]> {
    const query = plainToClass(OfficeFindManyArgs, request.query);
    const results = await this.service.findOffices(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        hoursOfOperation: true,
        id: true,
        manager: true,
        name: true,
        phone: true,

        settlement: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/offices")
  async connectOffices(
    @common.Param() params: SettlementWhereUniqueInput,
    @common.Body() body: OfficeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      offices: {
        connect: body,
      },
    };
    await this.service.updateSettlement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/offices")
  async updateOffices(
    @common.Param() params: SettlementWhereUniqueInput,
    @common.Body() body: OfficeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      offices: {
        set: body,
      },
    };
    await this.service.updateSettlement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/offices")
  async disconnectOffices(
    @common.Param() params: SettlementWhereUniqueInput,
    @common.Body() body: OfficeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      offices: {
        disconnect: body,
      },
    };
    await this.service.updateSettlement({
      where: params,
      data,
      select: { id: true },
    });
  }
}
