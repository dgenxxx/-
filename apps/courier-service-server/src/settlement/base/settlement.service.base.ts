/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Settlement as PrismaSettlement,
  Office as PrismaOffice,
} from "@prisma/client";

export class SettlementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SettlementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.settlement.count(args);
  }

  async settlements<T extends Prisma.SettlementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementFindManyArgs>
  ): Promise<PrismaSettlement[]> {
    return this.prisma.settlement.findMany<Prisma.SettlementFindManyArgs>(args);
  }
  async settlement<T extends Prisma.SettlementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementFindUniqueArgs>
  ): Promise<PrismaSettlement | null> {
    return this.prisma.settlement.findUnique(args);
  }
  async createSettlement<T extends Prisma.SettlementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementCreateArgs>
  ): Promise<PrismaSettlement> {
    return this.prisma.settlement.create<T>(args);
  }
  async updateSettlement<T extends Prisma.SettlementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementUpdateArgs>
  ): Promise<PrismaSettlement> {
    return this.prisma.settlement.update<T>(args);
  }
  async deleteSettlement<T extends Prisma.SettlementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementDeleteArgs>
  ): Promise<PrismaSettlement> {
    return this.prisma.settlement.delete(args);
  }

  async findOffices(
    parentId: string,
    args: Prisma.OfficeFindManyArgs
  ): Promise<PrismaOffice[]> {
    return this.prisma.settlement
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .offices(args);
  }
}
