/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Office as PrismaOffice,
  Car as PrismaCar,
  Courier as PrismaCourier,
  Settlement as PrismaSettlement,
} from "@prisma/client";

export class OfficeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OfficeCountArgs, "select">): Promise<number> {
    return this.prisma.office.count(args);
  }

  async offices<T extends Prisma.OfficeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfficeFindManyArgs>
  ): Promise<PrismaOffice[]> {
    return this.prisma.office.findMany<Prisma.OfficeFindManyArgs>(args);
  }
  async office<T extends Prisma.OfficeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfficeFindUniqueArgs>
  ): Promise<PrismaOffice | null> {
    return this.prisma.office.findUnique(args);
  }
  async createOffice<T extends Prisma.OfficeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfficeCreateArgs>
  ): Promise<PrismaOffice> {
    return this.prisma.office.create<T>(args);
  }
  async updateOffice<T extends Prisma.OfficeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfficeUpdateArgs>
  ): Promise<PrismaOffice> {
    return this.prisma.office.update<T>(args);
  }
  async deleteOffice<T extends Prisma.OfficeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OfficeDeleteArgs>
  ): Promise<PrismaOffice> {
    return this.prisma.office.delete(args);
  }

  async findCars(
    parentId: string,
    args: Prisma.CarFindManyArgs
  ): Promise<PrismaCar[]> {
    return this.prisma.office
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cars(args);
  }

  async findCouriers(
    parentId: string,
    args: Prisma.CourierFindManyArgs
  ): Promise<PrismaCourier[]> {
    return this.prisma.office
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .couriers(args);
  }

  async getSettlement(parentId: string): Promise<PrismaSettlement | null> {
    return this.prisma.office
      .findUnique({
        where: { id: parentId },
      })
      .settlement();
  }
}
